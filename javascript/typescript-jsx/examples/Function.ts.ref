(program (sourceElements (sourceElement (statement (functionDeclaration function Sum (callSignature ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName x)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))))) , (parameter (requiredParameter (identifierOrPattern (identifierName y)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number)))))))) ) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType void)))))) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (singleExpression (literal 'processNumKeyPairs: key = ')) + (singleExpression (identifierName key) (singleExpression (singleExpression + (singleExpression (literal ', value = '))) + (singleExpression (identifierName value))))))) ))))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifierName x) (singleExpression + (singleExpression (identifierName y))))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord greeting) = (singleExpression (functionExpressionDeclaration function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (literal "Hello TypeScript!")))) )))) ;))))) })))) ;))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord SumAnon) = (singleExpression (functionExpressionDeclaration function ( (formalParameterList (formalParameterArg (identifierOrKeyWord x) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number)))))) , (formalParameterArg (identifierOrKeyWord y) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))))) ) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifierName x) (singleExpression + (singleExpression (identifierName y))))) (eos ;)))))) }))))))) (sourceElement (statement (functionDeclaration function Greet (callSignature ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName greeting)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string))))))) , (parameter (optionalParameter (identifierOrPattern (identifierName name)) ? (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string)))))))) ) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string)))))) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifierName greeting) (singleExpression (singleExpression + (singleExpression (literal ' '))) + (singleExpression (identifierName name) (singleExpression + (singleExpression (literal '!'))))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function terminateJob (callSignature ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName jobId)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string)))))))) )) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName http)) . (identifierName (reservedWord (keyword delete))) (nestedTypeGeneric (typeIncludeGeneric < (typeArgumentList (typeArgument (type_ (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName IOperationResult))))))) < (typeArgumentList (typeArgument (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType any)))))) >>))) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function Greet2 (callSignature ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName name)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string))))))) , (parameter (optionalParameter (identifierOrPattern (identifierName greeting)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string))))) (initializer = (singleExpression (literal "Hello")))))) ) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string)))))) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifierName greeting) (singleExpression (singleExpression + (singleExpression (literal ' '))) + (singleExpression (identifierName name) (singleExpression + (singleExpression (literal '!'))))))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (variableDeclaration (identifierOrKeyWord Greet) (singleExpression ( (expressionSequence (singleExpression (identifierName undefined)) , (singleExpression (literal 'Steve'))) )))) ;))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord sumArrow) = (singleExpression (arrowFunctionDeclaration (arrowFunctionParameters ( (formalParameterList (formalParameterArg (identifierOrKeyWord x) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number)))))) , (formalParameterArg (identifierOrKeyWord y) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))))) )) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifierName x) (singleExpression + (singleExpression (identifierName y))))) eos))))) })))))))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord Print) = (singleExpression (arrowFunctionDeclaration (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (literal "Hello TypeScript")))) )))))))) ;))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord sumShortArrow) = (singleExpression (arrowFunctionDeclaration (arrowFunctionParameters ( (formalParameterList (formalParameterArg (identifierOrKeyWord x) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number)))))) , (formalParameterArg (identifierOrKeyWord y) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))))) )) => (arrowFunctionBody (singleExpression (identifierName x) (singleExpression + (singleExpression (identifierName y))))))))) ;))) (sourceElement (statement (functionDeclaration function Greet (callSignature ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName greeting)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string))))))) , (restParameter ... (singleExpression (identifierName names)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (primaryType (predefinedType string)) [ ])))))) )) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifierName greeting) (singleExpression (singleExpression (singleExpression + (singleExpression (literal " "))) + (singleExpression (singleExpression (singleExpression (identifierName names)) . (identifierName join)) (arguments ( (argumentList (argument (singleExpression (literal ", ")))) )))) + (singleExpression (literal "!"))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function Test (callSignature ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName value)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName TestClass)))) | (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName TestClass2)))))))))) ) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName value)) is (primaryType (typeReference (typeName TestClass)))))))) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (typeArguments < (typeArgumentList (typeArgument (type_ (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName TestClass))))))) >) (expressionSequence (singleExpression (identifierName value))))) )) . (identifierName someFunction)) !== (singleExpression (identifierName undefined)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function buildName (callSignature ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName firstName)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string))))))) , (parameter (optionalParameter (identifierOrPattern (identifierName lastName)) ? (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string)))))))) )) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (identifierName lastName))) ) (statement (returnStatement return (expressionSequence (singleExpression (identifierName firstName) (singleExpression (singleExpression + (singleExpression (literal " "))) + (singleExpression (identifierName lastName))))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (identifierName firstName))) (eos ;)))))))) })))) <EOF>)
