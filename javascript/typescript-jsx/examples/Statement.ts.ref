(program (sourceElements (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord x) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))) = (singleExpression (literal (numericLiteral 10)))) , (variableDeclaration (identifierOrKeyWord y) = (singleExpression (literal (numericLiteral 20))))) ;))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (identifierName x)) > (singleExpression (identifierName y)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (literal 'x is greater than y.')))) )))) ;))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (literal 'x is less than or equal to y.')))) )))) ;))) }))))) (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression (identifierName x) (singleExpression - (singleExpression (identifierName y))))) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 0)))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (literal "Result: 0")))) )))) ;)) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 5)))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (literal "Result: 5")))) )))) ;)) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 10)))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (literal "Result: 10")))) )))) ;)) (statement (breakStatement break (eos ;)))))) })))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (identifierName (reservedWord (keyword let))) (singleExpression (singleExpression (identifierName i)) = (singleExpression (literal (numericLiteral 0)))))) ; (expressionSequence (singleExpression (singleExpression (identifierName i)) < (singleExpression (literal (numericLiteral 3))))) ; (expressionSequence (singleExpression (singleExpression (identifierName i)) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (singleExpression (literal "Block statement execution no.")) + (singleExpression (identifierName i))))) )))) ;))) }))))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord str) = (singleExpression (literal "Hello World")))) ;))) (sourceElement (statement (iterationStatement for ( (singleExpression (identifierName (reservedWord (keyword var))) (singleExpression (identifierName char))) of (expressionSequence (singleExpression (identifierName str))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (identifierName char)))) )))) ;))) }))))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord arr) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 10)))) , (arrayElement (singleExpression (literal (numericLiteral 20)))) , (arrayElement (singleExpression (literal (numericLiteral 30)))) , (arrayElement (singleExpression (literal (numericLiteral 40))))) ])))) ;))) (sourceElement (statement (iterationStatement for ( (singleExpression (identifierName (reservedWord (keyword var))) (singleExpression (identifierName index))) in (expressionSequence (singleExpression (identifierName arr))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (identifierName index)))) )))) ;)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (identifierName arr) (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (identifierName index)))) ]))))) )))) ;))) }))))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord i) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))) = (singleExpression (literal (numericLiteral 2))))) ;))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (singleExpression (literal "Block statement execution no.")) + (singleExpression (identifierName i))))) )))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifierName i)) ++)) ;))) })) while ( (expressionSequence (singleExpression (singleExpression (identifierName i)) < (singleExpression (literal (numericLiteral 4))))) ) eos))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (identifierName i)) < (singleExpression (literal (numericLiteral 4))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (singleExpression (literal "Block statement execution no.")) + (singleExpression (identifierName i))))) )))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifierName i)) ++)) ;))) })))))) <EOF>)
