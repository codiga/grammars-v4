(program (sourceElements (sourceElement export (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord age) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))) = (singleExpression (literal (numericLiteral 20))))) ;))) (sourceElement export (statement (classDeclaration class Employee classHeritage (classTail { (classElement (propertyMemberDeclaration propertyMemberBase (propertyName (identifierName empCode)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))) ;)) (classElement (propertyMemberDeclaration propertyMemberBase (propertyName (identifierName empName)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string))))) ;)) (classElement (constructorDeclaration constructor ( (formalParameterList (formalParameterArg (identifierOrKeyWord name) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string)))))) , (formalParameterArg (identifierOrKeyWord code) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName empName)) = (singleExpression (identifierName name)))) ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName empCode)) = (singleExpression (identifierName code)))) ;))))) })) (classElement (propertyMemberDeclaration propertyMemberBase (propertyName (identifierName displayEmployee)) (callSignature ( )) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "Employee Code: ")) + (singleExpression (singleExpression this) . (identifierName empCode))) + (singleExpression (literal ", Employee Name: "))) + (singleExpression (singleExpression this) . (identifierName empName))))) )))) ;))))) })) })))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord companyName) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string))))) = (singleExpression (literal "XYZ")))) ;)))) <EOF>)
