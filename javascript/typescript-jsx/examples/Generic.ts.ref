(program (sourceElements (sourceElement (statement (functionDeclaration function getArray (callSignature (typeParameters < (typeParameterList (typeParameter T)) >) ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName items)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (primaryType (typeReference (typeName T))) [ ]))))))) ) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (primaryType (typeReference (typeName T))) [ ]))))) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (identifierName Array) (singleExpression (singleExpression (singleExpression (typeArguments < (typeArgumentList (typeArgument (type_ (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName T))))))) >)) (arguments ( ))) . (identifierName concat))) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord myNumArr) = (singleExpression (identifierName getArray) (singleExpression (typeArguments < (typeArgumentList (typeArgument (type_ (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName Test))))))) >) (expressionSequence (singleExpression ( (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 100)))) , (arrayElement (singleExpression (literal (numericLiteral 200)))) , (arrayElement (singleExpression (literal (numericLiteral 300))))) ]))) ))))))) ;))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord myStrArr) = (singleExpression (identifierName getArray) (singleExpression (typeArguments < (typeArgumentList (typeArgument (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string)))))) >) (expressionSequence (singleExpression ( (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Hello"))) , (arrayElement (singleExpression (literal "World")))) ]))) ))))))) ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName myNumArr)) . (identifierName push)) (arguments ( (argumentList (argument (singleExpression (literal (numericLiteral 400))))) )))) ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName myStrArr)) . (identifierName push)) (arguments ( (argumentList (argument (singleExpression (literal "Hello TypeScript")))) )))) ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName myNumArr)) . (identifierName push)) (arguments ( (argumentList (argument (singleExpression (literal "Hi")))) )))) ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName myStrArr)) . (identifierName push)) (arguments ( (argumentList (argument (singleExpression (literal (numericLiteral 500))))) )))) ;))) (sourceElement (statement (functionDeclaration function displayType (callSignature (typeParameters < (typeParameterList (typeParameter T) , (typeParameter U)) >) ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName id)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName T)))))))) , (parameter (requiredParameter (identifierOrPattern (identifierName name)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName U))))))))) ) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType void)))))) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (singleExpression (singleExpression typeof (singleExpression ( (expressionSequence (singleExpression (identifierName id))) ))) + (singleExpression (literal ", "))) + (singleExpression typeof (singleExpression ( (expressionSequence (singleExpression (identifierName name))) )))))) )))) ;))))) }))) (sourceElement (statement (functionDeclaration function displayTypeNon (callSignature (typeParameters < (typeParameterList (typeParameter T)) >) ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName id)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName T)))))))) , (parameter (requiredParameter (identifierOrPattern (identifierName name)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string)))))))) ) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType void)))))) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (singleExpression (singleExpression typeof (singleExpression ( (expressionSequence (singleExpression (identifierName id))) ))) + (singleExpression (literal ", "))) + (singleExpression typeof (singleExpression ( (expressionSequence (singleExpression (identifierName name))) )))))) )))) ;))))) }))) (sourceElement (statement (functionDeclaration function displayNames (callSignature (typeParameters < (typeParameterList (typeParameter T)) >) ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName names)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (primaryType (typeReference (typeName T))) [ ]))))))) ) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType void)))))) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (singleExpression (singleExpression (identifierName names)) . (identifierName join)) (arguments ( (argumentList (argument (singleExpression (literal ", ")))) ))))) )))) ;))))) }))) (sourceElement (statement (functionDeclaration function display (callSignature (typeParameters < (typeParameterList (typeParameter T (constraint extends (type_ (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName Person)))))))) >) ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName per)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (typeReference (typeName T))))))))) ) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType void)))))) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (literal (templateStringLiteral ` (templateStringAtom ${ (singleExpression (singleExpression (identifierName per)) . (identifierName firstName)) }) (templateStringAtom  ) (templateStringAtom ${ (singleExpression (singleExpression (identifierName per)) . (identifierName lastName)) }) `))))) )))) ;))))) })))) <EOF>)
