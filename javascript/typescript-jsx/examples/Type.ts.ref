(program (sourceElements (sourceElement (statement (variableStatement (varModifier var) (variableDeclarationList (variableDeclaration (identifierOrKeyWord age) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))) = (singleExpression (literal (numericLiteral 32))))) ;))) (sourceElement (statement (variableStatement (varModifier var) (variableDeclarationList (variableDeclaration (identifierOrKeyWord name) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string))))) = (singleExpression (literal "John")))) ;))) (sourceElement (statement (variableStatement (varModifier var) (variableDeclarationList (variableDeclaration (identifierOrKeyWord isUpdated) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType boolean))))) = (singleExpression (identifierName (reservedWord true))))) ;))) (sourceElement (statement (variableStatement (varModifier var) (variableDeclarationList (variableDeclaration (identifierOrKeyWord employee) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (objectType { (typeBody (typeMemberList (typeMember (propertySignatur (propertyName (identifierName id)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))))) ; (typeMember (propertySignatur (propertyName (identifierName name)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string)))))))) ;) }))))))) ;))) (sourceElement (statement (variableStatement (variableDeclarationList (variableDeclaration (identifierOrKeyWord employee) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName id)) : (singleExpression (literal (numericLiteral 100)))) , (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "John"))) }))))))) (sourceElement (statement (functionDeclaration function display (callSignature ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName id)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))))) , (parameter (requiredParameter (identifierOrPattern (identifierName name)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string)))))))) )) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression (singleExpression (literal "Id = ")) + (singleExpression (identifierName id) (singleExpression (singleExpression + (singleExpression (literal ", Name = "))) + (singleExpression (identifierName name))))))) )))) ;))))) }))) (sourceElement (statement (variableStatement (varModifier var) (variableDeclarationList (variableDeclaration (identifierOrKeyWord arr) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal "test")))) ])))) ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName arr)) . (identifierName push)) (arguments ( (argumentList (argument (singleExpression (literal "str")))) ))))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName arr)) . (identifierName push)) (arguments ( (argumentList (argument (singleExpression (identifierName (reservedWord true))))) )))) ;))) (sourceElement (statement (functionDeclaration function sum (callSignature ( (parameterList (parameter (requiredParameter (identifierOrPattern (identifierName a)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))))) , (parameter (requiredParameter (identifierOrPattern (identifierName b)) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number)))))))) )) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifierName a) (singleExpression + (singleExpression (identifierName b))))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (varModifier var) (variableDeclarationList (variableDeclaration (identifierOrKeyWord total) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number))))) = (singleExpression (identifierName sum) (singleExpression ( (expressionSequence (singleExpression (literal (numericLiteral 10))) , (singleExpression (literal (numericLiteral 20)))) ))))) ;))) (sourceElement (statement (variableStatement (varModifier var) (variableDeclarationList (variableDeclaration (identifierOrKeyWord str) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType string))))) = (singleExpression (identifierName sum) (singleExpression ( (expressionSequence (singleExpression (literal (numericLiteral 10))) , (singleExpression (literal (numericLiteral 20)))) ))))) ;))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord code) (typeAnnotation : (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType any))))) = (singleExpression (literal (numericLiteral 123))))) ;))) (sourceElement (statement (variableStatement (varModifier let) (variableDeclarationList (variableDeclaration (identifierOrKeyWord employeeCode) = (singleExpression (typeArguments < (typeArgumentList (typeArgument (type_ (unionOrIntersectionOrPrimaryType (primaryType (predefinedType number)))))) >) (expressionSequence (singleExpression (identifierName code)))))) ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifierName console)) . (identifierName log)) (arguments ( (argumentList (argument (singleExpression typeof (singleExpression ( (expressionSequence (singleExpression (identifierName employeeCode))) ))))) )))) ;)))) <EOF>)
